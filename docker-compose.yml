version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: trainingdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d trainingdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - training-network

  # Users Service
  users-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODEJS_VERSION: 18
        PROJECT: users
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://devuser:devpass@postgres:5432/trainingdb
      - PORT_USERS=3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - training-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODEJS_VERSION: 18
        PROJECT: auth
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://devuser:devpass@postgres:5432/trainingdb
      - PORT_AUTH=3000
      - JWT_SECRET=your-super-secret-jwt-key-here
      - PASSPORT_SECRET=your-passport-secret-here
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - training-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Gyms Service
  gyms-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODEJS_VERSION: 18
        PROJECT: gyms
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://devuser:devpass@postgres:5432/trainingdb
      - PORT_GYMS=3000
      - JWT_SECRET=your-super-secret-jwt-key-here
      - PASSPORT_SECRET=your-passport-secret-here
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - training-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Bookings Service
  bookings-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODEJS_VERSION: 18
        PROJECT: bookings
    restart: unless-stopped
    ports:
      - "3004:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://devuser:devpass@postgres:5432/trainingdb
      - PORT_BOOKINGS=3000
      - JWT_SECRET=your-super-secret-jwt-key-here
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - training-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payments Service
  payments-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODEJS_VERSION: 18
        PROJECT: payments
    restart: unless-stopped
    ports:
      - "3005:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://devuser:devpass@postgres:5432/trainingdb
      - PORT_PAYMENTS=3000
      - JWT_SECRET=your-super-secret-jwt-key-here
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - training-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trainings Service
  trainers-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODEJS_VERSION: 18
        PROJECT: trainers
    restart: unless-stopped
    ports:
      - "3006:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://devuser:devpass@postgres:5432/trainingdb
      - PORT_TRAININGS=3000
      - JWT_SECRET=your-super-secret-jwt-key-here
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - training-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (opcional - para centralizar todas las APIs)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - users-service
      - auth-service
      - gyms-service
      - bookings-service
      - payments-service
      - trainers-service
    networks:
      - training-network

volumes:
  pgdata:

networks:
  training-network:
    driver: bridge 